#!/usr/bin/sh
# version="0.1"
#
# ARG_OPTIONAL_BOOLEAN([with-i3],[],[Add symlinks for i3 as the WM],[])
# ARG_VERSION([echo test v$version])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='v'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_with_i3="off"

print_help ()
{
	printf 'Usage: %s [--(no-)with-i3] [-v|--version]\n' "$0"
	printf '\t%s\n' "--with-i3,--no-with-i3: Add symlinks for i3 as the WM (off by default)"
	printf '\t%s\n' "-v,--version: Prints version"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-with-i3|--with-i3)
				_arg_with_i3="on"
				test "${1:0:5}" = "--no-" && _arg_with_i3="off"
				;;
			-v|--version)
				echo test v$version
				exit 0
				;;
			-v*)
				echo test v$version
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# [ <-- needed because of Argbash

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"

if ! type 'stow' &> /dev/null; then
  echo 'GNU Stow is not installed on this machine.'
  exit 1
fi

stow -t "$HOME" zsh
stow -t "$HOME" xwindow

if [ _arg_with_i3 == 'on' ]; then
  stow -t "$HOME" i3
fi

stow -t "$HOME" atom
ln -s "$HOME"/.atom "$XDG_DATA_HOME"/atom

# ] <-- needed because of Argbash