#!/usr/bin/sh
# version="0.1"
#
# ARG_OPTIONAL_BOOLEAN([with-i3],[],[Add symlinks for i3 as the WM],[])
# ARG_VERSION([echo test v$version])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='v'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

print_help ()
{
	printf 'Usage: %s [OPTIONS]\n' "$0"
	printf '\t%s\n' "--with-archlinux: Add symlinks for archlinx files (off by default)"
	printf '\t%s\n' "--with-atom: Add symlinks for atom as the visual editor (off by default)"
	printf '\t%s\n' "--with-cinnamon: Add symlinks for cinnamon as the WM (off by default)"
	printf '\t%s\n' "--with-i3: Add symlinks for i3 as the WM (off by default)"
	printf '\t%s\n' "--with-i3: Add symlinks for nodejs and nvm (off by default)"
	printf '\t%s\n' "--with-i3: Add symlinks for Ruby and rvm (off by default)"
	printf '\t%s\n' "-v,--version: Prints version"
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_with_archlinux="off"
_arg_with_atom="off"
_arg_with_cinnamon="off"
_arg_with_i3="off"
_arg_with_node="off"
_arg_with_rvm="off"

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--with-archlinux)
			  _arg_with_archlinux="on"
				;;
			--with-atom)
				_arg_with_atom="on"
				;;
			--with-cinnamon)
				_arg_with_cinnamon="on"
				;;
			--with-i3)
				_arg_with_i3="on"
				;;
			--with-node)
			  _arg_with_node="on"
				;;
			--with-rvm)
				_arg_with_rvm="on"
				;;
			-v|--version)
				echo test v$version
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# [ <-- needed because of Argbash

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"

if ! type 'stow' &> /dev/null; then
  echo 'GNU Stow is not installed on this machine.'
  exit 1
fi

if [ ! -d "$XDG_DATA_HOME/vim/bundle/Vundle.vim" ]; then
  git clone https://github.com/VundleVime/Vundle.vim.git \
    "$XDG_DATA_HOME/vim/bundle/Vundle.vim"
  vim +PluginInstall +qall
fi

for component in ("git" "gtk" "misc" "vim" "zsh")
	stow -t "$HOME" $component
	if [[ $component == 'zsh' && ! -d "$ZPLUG_HOME" ]]; then
		git clone https:://github.com/zplug/zplug "$ZPLUG_HOME"
	fi
done

if [ _arg_with_archlinux == 'on' ]; then
	stow -t "$HOME" archlinux
	stow -t "$HOME" nvidia
	stow -t "$HOME" systemd
done

if [ _arg_with_atom == 'on' ]; then
	stow -t "$HOME" atom
  ln -s "$HOME"/.atom "$XDG_DATA_HOME"/atom
done

if [ _arg_with-cinnamon == 'on' ]; then
	stow -t "$HOME" cinnamon
done

if [ _arg_with_i3 == 'on' ]; then
  stow -t "$HOME" i3
fi

if [ _arg_with_node == 'on' ]; then
	if [ ! -d "$NVM_DIR" ]; then
	  git clone https://github.com/nvm-sh/nvm "$XDG_DATA_HOME/nvm"
	fi
	stow -t "$HOME" node
fi

if [ _arg_with_rvm == 'on' ]; then
	if [ ! -d "$XDG_DATA_HOME/rvm" ]; then
    curl -sSL https://get.rvm.io | sh -s -- --ignore-dotfiles stable
  fi
fi

# ] <-- needed because of Argbash
